// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract OptimisticRollup {
    struct Batch {
        uint256 batchId;
        bytes32 stateRoot;
        uint256 timestamp;
    }

    mapping(uint256 => Batch) public batches;
    uint256 public nextBatchId;

    event BatchSubmitted(uint256 indexed batchId, bytes32 stateRoot, uint256 timestamp);

    function submitBatch(bytes32 _stateRoot) external {
        require(_stateRoot != bytes32(0), "Invalid state root");

        batches[nextBatchId] = Batch({
            batchId: nextBatchId,
            stateRoot: _stateRoot,
            timestamp: block.timestamp
        });

        emit BatchSubmitted(nextBatchId, _stateRoot, block.timestamp);

        nextBatchId++;
    }

    function challengeBatch(uint256 _batchId, bytes memory _proof) external {
        require(_batchId < nextBatchId, "Batch does not exist");
        // 这里可以实现欺诈证明逻辑
    }
}